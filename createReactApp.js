'use strict';
// trying to copy https://github.com/facebookincubator/create-react-app/blob/master/packages/create-react-app/createReactApp.js
// the difference is they have more features, like using yarn or npm (and checking versions), windows or mac, doing lots of checks to make sure things run smoothly
// I just wanna create a react app man

const validateProjectName = require('validate-npm-package-name');
const chalk = require('chalk'); // pretty colors
const commander = require('commander'); // for executing commands (what's difference with child_process?)
const fs = require('fs-extra');
const path = require('path');

// const spawn = require('cross-spawn'); // I don't understand why this vs child_process
const cp = require('child_process');

const packageJson = require('./package.json');
// const initScript = require('./init.js')

let projectName;

// all I know is this takes in the projectName arg
const program = new commander.Command(packageJson.name)
    .version(packageJson.version)
    .arguments('<project-directory>')
    .usage(`${chalk.green('<project-directory>')} [options]`)
    .action(name => {
        projectName = name;
    })
    .parse(process.argv);


// if no project name specified
if (typeof projectName === 'undefined') {
    console.error('Please specify the project directory: ')
    console.log(
        `  ${chalk.cyan(program.name())} ${chalk.green('<project-directory>')}`
    );
    process.exit(0); // should be exit 1 but can't figure out how to supress all the error messaging
}

// let's go
createApp(projectName);

function createApp(name) {
    const root = path.resolve(name);
    // const appName = path.basename(root);
    checkAppName(name);
    fs.ensureDirSync(name); // not sure what this does
    if (!isSafeToCreateProjectIn(root, name)) {
        process.exit(0); // TODO process.exit(1);
    }

    console.log(`Creating a new React app in ${chalk.green(root)}.`);
    console.log(); // TODO can we just \n instead???

    // create package.json
    const packageJson = {
        name,
        version: '1.0.0',
    };
    fs.writeFileSync(
        path.join(root, 'package.json'),
        JSON.stringify(packageJson, null, 2)
    );

    const originalDirectory = process.cwd(); // same as __dirname?
    process.chdir(root);

    run(originalDirectory);
}


// check app name against npm validation
function checkAppName(name) {
    const validationResult = validateProjectName(name);
    if (!validationResult.validForNewPackages) {
        console.error(
          `Could not create a project called ${chalk.red(
            `"${name}"`
          )} because of npm naming restrictions:`
        );
        printValidationResults(validationResult.errors);
        printValidationResults(validationResult.warnings);
        process.exit(0);
    }

    // TODO: there should be a single place that holds the dependencies - isn't that package.json?
    const dependencies = ['react', 'react-dom', 'react-scripts'].sort();
    if (dependencies.indexOf(name) >= 0) {
        console.error(
        chalk.red(
            `We cannot create a project called ${chalk.green(
            name
            )} because a dependency with the same name exists.\n` +
            `Due to the way npm works, the following names are not allowed:\n\n`
        ) +
            chalk.cyan(dependencies.map(depName => `  ${depName}`).join('\n')) +
            chalk.red('\n\nPlease choose a different project name.')
        );
        process.exit(); // TODO: should be process.exit(1);
    }
}

function printValidationResults(results) {
    if (typeof results !== 'undefined') {
        results.forEach(error => {
            console.error(chalk.red(`  *  ${error}`));
        });
    }
}


// If project only contains files generated by GH, itâ€™s safe.
// We also special case IJ-based products .idea because it integrates with CRA:
// https://github.com/facebookincubator/create-react-app/pull/368#issuecomment-243446094
function isSafeToCreateProjectIn(root, name) {
    const validFiles = [
      '.DS_Store',
      'Thumbs.db',
      '.git',
      '.gitignore',
      '.idea',
      'README.md',
      'LICENSE',
      'web.iml',
      '.hg',
      '.hgignore',
      '.hgcheck',
      '.npmignore',
      'mkdocs.yml',
      'docs',
      '.travis.yml',
      '.gitlab-ci.yml',
      '.gitattributes',
    ];
    console.log();
  
    const conflicts = fs
      .readdirSync(root)
      .filter(file => !validFiles.includes(file));
    
    if (conflicts.length < 1) {
      return true;
    }
  
    console.log(`The directory ${chalk.green(name)} contains files that could conflict:`);
    console.log();
    for (const file of conflicts) {
      console.log(`  ${file}`);
    }
    console.log();
    console.log('Either try using a new directory name, or remove the files listed above.');
  
    return false;
}



function run(originalDirectory) {
    // const packageToInstall = 'react-scripts' // getInstallPackage(version, originalDirectory)
    const allDependencies = ['react', 'react-dom'] // I don't even want react-scripts, that's part of my job
    console.log('Installing packages. This might take a couple years.')
    
    install(allDependencies)
    .then(
        () => {
            console.log('init stuff like copying template') // also init a git repo and make first commit
            console.log('done-zo')
            process.exit(1);
        }, 
        () => { 
            console.log('rejected for some reason')
            process.exit(1);
        }
    )
    .catch(reason => {
        console.log('CAUGHT REASON: ', reason)
        process.exit(1);
    })
}

function install(dependencies) {
    return new Promise((resolve, reject) => {
        let command;
        let args;
        
        command = 'npm install -s react react-dom redux'; // could pass in more dependencies as args

        // for use with spawn instead of execSync
        // args = [
        //     'install',
        //     '--save',
        //     '--loglevel error',
        // ].concat(dependencies);
    
        cp.execSync(command, { stdio: 'inherit' })
        resolve();
        // const child = spawn(command, args, { stdio: 'inherit' });
        // child.on('close', code => {
        //     console.log('on close')
        //     if (code !== 0) {
        //     reject({
        //         command: `${command} ${args.join(' ')}`,
        //     });
        //     return;
        //     }
        //     resolve();
        // });
    });
}